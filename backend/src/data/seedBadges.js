/**
 * =============================================================================
 * BADGE SEEDER
 * =============================================================================
 * Seeds initial badges into the database
 */

const { supabase } = require('../config/supabase');

const badges = [
  // Huy hi·ªáu B·∫Øt ƒë·∫ßu
  {
    id: 'welcome',
    name: 'Ch√†o m·ª´ng',
    description: 'Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi LumiLink!',
    icon: 'üëã',
    category: 'thanh-tuu',
    target_value: 1,
    color: '#3B82F6',
    is_active: true
  },
  {
    id: 'first-link',
    name: 'Li√™n k·∫øt ƒë·∫ßu ti√™n',
    description: 'ƒê√£ th√™m li√™n k·∫øt ƒë·∫ßu ti√™n',
    icon: 'üîó',
    category: 'thanh-tuu',
    target_value: 1,
    color: '#10B981',
    is_active: true
  },
  {
    id: 'profile-complete',
    name: 'Chuy√™n gia h·ªì s∆°',
    description: 'Ho√†n th√†nh h·ªì s∆° c√° nh√¢n',
    icon: 'üë§',
    category: 'thanh-tuu',
    target_value: 100,
    color: '#8B5CF6',
    is_active: true
  },

  // Huy hi·ªáu M·∫°ng x√£ h·ªôi
  {
    id: 'social-starter',
    name: 'Ng∆∞·ªùi m·ªõi m·∫°ng x√£ h·ªôi',
    description: 'Th√™m 5 li√™n k·∫øt m·∫°ng x√£ h·ªôi',
    icon: 'üì±',
    category: 'thanh-tuu',
    target_value: 5,
    color: '#F59E0B',
    is_active: true
  },
  {
    id: 'social-butterfly',
    name: 'B∆∞·ªõm m·∫°ng x√£ h·ªôi',
    description: 'Th√™m 10 li√™n k·∫øt m·∫°ng x√£ h·ªôi',
    icon: 'ü¶ã',
    category: 'thanh-tuu',
    target_value: 10,
    color: '#EC4899',
    is_active: true
  },

  // Huy hi·ªáu T∆∞∆°ng t√°c
  {
    id: 'first-click',
    name: 'Nh·∫•p chu·ªôt ƒë·∫ßu ti√™n',
    description: 'Nh·∫≠n ƒë∆∞·ª£c l∆∞·ª£t nh·∫•p ƒë·∫ßu ti√™n',
    icon: 'üëÜ',
    category: 'luot-nhap',
    target_value: 1,
    color: '#06B6D4',
    is_active: true
  },
  {
    id: 'click-collector',
    name: 'Ng∆∞·ªùi thu th·∫≠p nh·∫•p chu·ªôt',
    description: 'Nh·∫≠n ƒë∆∞·ª£c 100 l∆∞·ª£t nh·∫•p',
    icon: 'üíØ',
    category: 'luot-nhap',
    target_value: 100,
    color: '#84CC16',
    is_active: true
  },
  {
    id: 'click-master',
    name: 'B·∫≠c th·∫ßy nh·∫•p chu·ªôt',
    description: 'Nh·∫≠n ƒë∆∞·ª£c 1000 l∆∞·ª£t nh·∫•p',
    icon: 'üèÜ',
    category: 'luot-nhap',
    target_value: 1000,
    color: '#F97316',
    is_active: true
  },

  // Huy hi·ªáu L∆∞·ª£t xem
  {
    id: 'first-view',
    name: 'L∆∞·ª£t xem ƒë·∫ßu ti√™n',
    description: 'Nh·∫≠n ƒë∆∞·ª£c l∆∞·ª£t xem h·ªì s∆° ƒë·∫ßu ti√™n',
    icon: 'üëÅÔ∏è',
    category: 'luot-xem',
    target_value: 1,
    color: '#6366F1',
    is_active: true
  },
  {
    id: 'popular',
    name: 'N·ªïi ti·∫øng',
    description: 'Nh·∫≠n ƒë∆∞·ª£c 100 l∆∞·ª£t xem h·ªì s∆°',
    icon: 'üåü',
    category: 'luot-xem',
    target_value: 100,
    color: '#EF4444',
    is_active: true
  },
  {
    id: 'viral',
    name: 'Lan truy·ªÅn',
    description: 'Nh·∫≠n ƒë∆∞·ª£c 1000 l∆∞·ª£t xem h·ªì s∆°',
    icon: 'üöÄ',
    category: 'luot-xem',
    target_value: 1000,
    color: '#DC2626',
    is_active: true
  },

  // Huy hi·ªáu ƒê·∫∑c bi·ªát
  {
    id: 'early-adopter',
    name: 'Ng∆∞·ªùi d√πng s·ªõm',
    description: 'Tham gia LumiLink t·ª´ phi√™n b·∫£n beta',
    icon: 'üöÄ',
    category: 'dac-biet',
    target_value: 1,
    color: '#7C3AED',
    is_active: true
  },
  {
    id: 'beta-tester',
    name: 'Ng∆∞·ªùi th·ª≠ nghi·ªám Beta',
    description: 'Gi√∫p th·ª≠ nghi·ªám c√°c t√≠nh nƒÉng m·ªõi',
    icon: 'üß™',
    category: 'dac-biet',
    target_value: 1,
    color: '#059669',
    is_active: true
  },
  {
    id: 'customization-guru',
    name: 'Chuy√™n gia t√πy ch·ªânh',
    description: 'T√πy ch·ªânh ho√†n to√†n h·ªì s∆° c·ªßa b·∫°n',
    icon: 'üé®',
    category: 'thanh-tuu',
    target_value: 1,
    color: '#DB2777',
    is_active: true
  }
];

/**
 * Seed badges into database
 */
const seedBadges = async () => {
  try {

    // First, check if badges table exists and has data
    const { data: existingBadges, error: checkError } = await supabase
      .from('badges')
      .select('id')
      .limit(1);

    if (checkError) {
      console.error('‚ùå Error checking badges table:', checkError);
      return false;
    }

    if (existingBadges && existingBadges.length > 0) {
      
      // Update existing badges
      for (const badge of badges) {
        const { error: upsertError } = await supabase
          .from('badges')
          .upsert(badge, { onConflict: 'id' });

        if (upsertError) {
          console.error(`‚ùå Error upserting badge ${badge.id}:`, upsertError);
        } else {
        }
      }
    } else {
      
      // Insert all badges
      const { data, error } = await supabase
        .from('badges')
        .insert(badges);

      if (error) {
        console.error('‚ùå Error inserting badges:', error);
        return false;
      }

    }

    return true;

  } catch (error) {
    console.error('‚ùå Badge seeding failed:', error);
    return false;
  }
};

/**
 * Run seeder if called directly
 */
if (require.main === module) {
  seedBadges()
    .then((success) => {
      if (success) {
        process.exit(0);
      } else {
        process.exit(1);
      }
    })
    .catch((error) => {
      console.error('‚ùå Unexpected error:', error);
      process.exit(1);
    });
}

module.exports = { seedBadges, badges };
